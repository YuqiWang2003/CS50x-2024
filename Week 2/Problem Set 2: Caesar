#include <cs50.h>
#include <ctype.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

int only_digits(string text);
char rotate(char letter, int k);

int main(int argc, string argv[])
{
    // check if command line has more than 1 argument, return prompt and 1
    if (argc != 2)
    {
        printf("Usage: ./caesar key\n");
        return 1;
    }
    // check if command line has a non-decimal degit (using only_digits function), return prompt and
    // 1
    if (only_digits(argv[1]) == 1)
    {
        printf("Usage: ./caesar key\n");
        return 1;
    }
    // return 0 if command line has 1 decimal digit, and convert it to int from string using atoi
    else
    {
        int key = atoi(argv[1]);
        if (key > 26)
        {
            key = atoi(argv[1]) % 26;
        }

        // request for plaintext using get_string
        string plaintext = get_string("Plaintext = ");
        // check every character of plaintext using strlen, for loop, and use rotate function on
        // them return rotated result as ciphertext
        char ciphertext[strlen(plaintext)];
        for (int i = 0, len = strlen(plaintext); i < len; i++)
        {
            ciphertext[i] = rotate(plaintext[i], key);
        }
        ciphertext[strlen(plaintext)] = '\0';
        printf("ciphertext: %s\n", ciphertext);
        return 0;
    }
}

// checks if text only has digits, returning true or falss
int only_digits(string text)
{
    for (int i = 0, len = strlen(text); i < len; i++)
    {
        if (isdigit(text[i]) == 0)
        {
            return 1;
        }
    }
    return 0;
}

// shifts letter by k times in alphabetical order, preserves casing, uses formula to wrap around
char rotate(char letter, int k)
{
    if (isalpha(letter))
    {
        if (isupper(letter))
        {
            int c = letter;
            c += k;
            if (c > 90)
            {
                c -= 26;
                c = (char) c;
                return c;
            }

            else
            {
                c = (char) c;
                return c;
            }
        }
        else
        {
            int c = letter;
            c = c + k;
            if (c > 122)
            {
                c -= 26;
                c = (char) c;
                return c;
            }
            else
            {
                c = (char) c;
                return c;
            }
        }
    }
    else
    {
        return letter;
    }
}
